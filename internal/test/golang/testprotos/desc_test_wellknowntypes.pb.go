// Code generated by protoc-gen-go. DO NOT EDIT.
// source: desc_test_wellknowntypes.proto

package testprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf2 "github.com/golang/protobuf/ptypes/any"
import google_protobuf3 "github.com/golang/protobuf/ptypes/duration"
import google_protobuf4 "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf5 "github.com/golang/protobuf/ptypes/struct"
import google_protobuf6 "github.com/golang/protobuf/ptypes/wrappers"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestWellKnownTypes struct {
	StartTime *google_protobuf4.Timestamp   `protobuf:"bytes,1,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	Elapsed   *google_protobuf3.Duration    `protobuf:"bytes,2,opt,name=elapsed" json:"elapsed,omitempty"`
	Dbl       *google_protobuf6.DoubleValue `protobuf:"bytes,3,opt,name=dbl" json:"dbl,omitempty"`
	Flt       *google_protobuf6.FloatValue  `protobuf:"bytes,4,opt,name=flt" json:"flt,omitempty"`
	Bl        *google_protobuf6.BoolValue   `protobuf:"bytes,5,opt,name=bl" json:"bl,omitempty"`
	I32       *google_protobuf6.Int32Value  `protobuf:"bytes,6,opt,name=i32" json:"i32,omitempty"`
	I64       *google_protobuf6.Int64Value  `protobuf:"bytes,7,opt,name=i64" json:"i64,omitempty"`
	U32       *google_protobuf6.UInt32Value `protobuf:"bytes,8,opt,name=u32" json:"u32,omitempty"`
	U64       *google_protobuf6.UInt64Value `protobuf:"bytes,9,opt,name=u64" json:"u64,omitempty"`
	Str       *google_protobuf6.StringValue `protobuf:"bytes,10,opt,name=str" json:"str,omitempty"`
	Byt       *google_protobuf6.BytesValue  `protobuf:"bytes,11,opt,name=byt" json:"byt,omitempty"`
	Json      []*google_protobuf5.Value     `protobuf:"bytes,12,rep,name=json" json:"json,omitempty"`
	Extras    []*google_protobuf2.Any       `protobuf:"bytes,13,rep,name=extras" json:"extras,omitempty"`
}

func (m *TestWellKnownTypes) Reset()                    { *m = TestWellKnownTypes{} }
func (m *TestWellKnownTypes) String() string            { return proto.CompactTextString(m) }
func (*TestWellKnownTypes) ProtoMessage()               {}
func (*TestWellKnownTypes) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *TestWellKnownTypes) GetStartTime() *google_protobuf4.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *TestWellKnownTypes) GetElapsed() *google_protobuf3.Duration {
	if m != nil {
		return m.Elapsed
	}
	return nil
}

func (m *TestWellKnownTypes) GetDbl() *google_protobuf6.DoubleValue {
	if m != nil {
		return m.Dbl
	}
	return nil
}

func (m *TestWellKnownTypes) GetFlt() *google_protobuf6.FloatValue {
	if m != nil {
		return m.Flt
	}
	return nil
}

func (m *TestWellKnownTypes) GetBl() *google_protobuf6.BoolValue {
	if m != nil {
		return m.Bl
	}
	return nil
}

func (m *TestWellKnownTypes) GetI32() *google_protobuf6.Int32Value {
	if m != nil {
		return m.I32
	}
	return nil
}

func (m *TestWellKnownTypes) GetI64() *google_protobuf6.Int64Value {
	if m != nil {
		return m.I64
	}
	return nil
}

func (m *TestWellKnownTypes) GetU32() *google_protobuf6.UInt32Value {
	if m != nil {
		return m.U32
	}
	return nil
}

func (m *TestWellKnownTypes) GetU64() *google_protobuf6.UInt64Value {
	if m != nil {
		return m.U64
	}
	return nil
}

func (m *TestWellKnownTypes) GetStr() *google_protobuf6.StringValue {
	if m != nil {
		return m.Str
	}
	return nil
}

func (m *TestWellKnownTypes) GetByt() *google_protobuf6.BytesValue {
	if m != nil {
		return m.Byt
	}
	return nil
}

func (m *TestWellKnownTypes) GetJson() []*google_protobuf5.Value {
	if m != nil {
		return m.Json
	}
	return nil
}

func (m *TestWellKnownTypes) GetExtras() []*google_protobuf2.Any {
	if m != nil {
		return m.Extras
	}
	return nil
}

func init() {
	proto.RegisterType((*TestWellKnownTypes)(nil), "testprotos.TestWellKnownTypes")
}

func init() { proto.RegisterFile("desc_test_wellknowntypes.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 431 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd3, 0x51, 0x8b, 0xd3, 0x40,
	0x10, 0x07, 0x70, 0xae, 0xbd, 0xeb, 0x79, 0x5b, 0x7d, 0x09, 0x22, 0x7b, 0xf5, 0x38, 0x0f, 0x9f,
	0x0e, 0xd1, 0x04, 0x92, 0x52, 0xd4, 0x37, 0x8b, 0x08, 0xe2, 0x5b, 0xad, 0x0a, 0xbe, 0x94, 0xdd,
	0x76, 0x9a, 0xcb, 0x39, 0xdd, 0x0d, 0xbb, 0xb3, 0xd4, 0x7c, 0x01, 0x3f, 0xb7, 0xec, 0x66, 0xab,
	0xd2, 0x10, 0x9f, 0x92, 0x65, 0x7e, 0xf3, 0xcf, 0x4c, 0x48, 0xd8, 0xf5, 0x06, 0xec, 0x7a, 0x45,
	0x60, 0x69, 0xb5, 0x07, 0xc4, 0x1f, 0x4a, 0xef, 0x15, 0x35, 0x35, 0xd8, 0xb4, 0x36, 0x9a, 0x74,
	0xc2, 0x7c, 0x29, 0xdc, 0xda, 0xc9, 0x65, 0xa9, 0x75, 0x89, 0x90, 0x85, 0xa3, 0x74, 0xdb, 0x4c,
	0xa8, 0xa6, 0x65, 0x93, 0xeb, 0xe3, 0xd2, 0xc6, 0x19, 0x41, 0x95, 0x56, 0xb1, 0xfe, 0xec, 0xb8,
	0x4e, 0xd5, 0x0e, 0x2c, 0x89, 0x5d, 0x1d, 0xc1, 0xd5, 0x31, 0xb0, 0x64, 0xdc, 0x9a, 0xfa, 0xe2,
	0xf7, 0x46, 0xd4, 0x35, 0x98, 0x38, 0xe5, 0xf3, 0x5f, 0x67, 0x2c, 0x59, 0x82, 0xa5, 0x6f, 0x80,
	0xf8, 0xc9, 0xaf, 0xb0, 0xf4, 0x2b, 0x24, 0x6f, 0x18, 0xb3, 0x24, 0x0c, 0xad, 0xfc, 0xd3, 0xf8,
	0xc9, 0xcd, 0xc9, 0xed, 0x38, 0x9f, 0xa4, 0x6d, 0x56, 0x7a, 0xc8, 0x4a, 0x97, 0x87, 0x51, 0x16,
	0x17, 0x41, 0xfb, 0x73, 0x52, 0xb0, 0x73, 0x40, 0x51, 0x5b, 0xd8, 0xf0, 0x41, 0xe8, 0xbb, 0xec,
	0xf4, 0xbd, 0x8f, 0x2b, 0x2e, 0x0e, 0x32, 0x49, 0xd9, 0x70, 0x23, 0x91, 0x0f, 0x43, 0xc3, 0x55,
	0xb7, 0x41, 0x3b, 0x89, 0xf0, 0x55, 0xa0, 0x83, 0x85, 0x87, 0xc9, 0x2b, 0x36, 0xdc, 0x22, 0xf1,
	0xd3, 0xe0, 0x9f, 0x76, 0xfc, 0x07, 0xd4, 0x82, 0x22, 0xdf, 0x22, 0x25, 0x2f, 0xd8, 0x40, 0x22,
	0x3f, 0xeb, 0x59, 0x63, 0xae, 0x35, 0xb6, 0x78, 0xd0, 0x46, 0x57, 0x45, 0xce, 0x47, 0x3d, 0xd1,
	0x1f, 0x15, 0x15, 0x79, 0x8c, 0xae, 0x8a, 0x3c, 0xf0, 0xd9, 0x94, 0x9f, 0xf7, 0xf3, 0xd9, 0xf4,
	0xc0, 0x67, 0x53, 0xbf, 0xa8, 0x2b, 0x72, 0xfe, 0xa0, 0x67, 0xd1, 0x2f, 0xff, 0xc6, 0xbb, 0x22,
	0x0f, 0x7e, 0x36, 0xe5, 0x17, 0xff, 0xf1, 0x7f, 0xf2, 0x5d, 0x9b, 0x6f, 0xc9, 0x70, 0xd6, 0xe3,
	0x3f, 0x93, 0xa9, 0x54, 0x19, 0xbd, 0x25, 0xe3, 0xc7, 0x97, 0x0d, 0xf1, 0x71, 0xcf, 0xf8, 0xf3,
	0x86, 0xc0, 0x46, 0x2e, 0x1b, 0xff, 0x22, 0x4f, 0xef, 0xad, 0x56, 0xfc, 0xe1, 0xcd, 0xf0, 0x76,
	0x9c, 0x3f, 0xe9, 0xf8, 0x96, 0x06, 0x93, 0xbc, 0x64, 0x23, 0xf8, 0x49, 0x46, 0x58, 0xfe, 0x28,
	0xe8, 0xc7, 0x1d, 0xfd, 0x4e, 0x35, 0x8b, 0x68, 0xe6, 0x6f, 0xbf, 0xbf, 0x2e, 0x2b, 0xba, 0x73,
	0x32, 0x5d, 0xeb, 0x5d, 0x76, 0x7f, 0xe7, 0x76, 0x75, 0xfb, 0xd1, 0x1a, 0xd8, 0x22, 0xac, 0x29,
	0xab, 0x14, 0x81, 0x51, 0x02, 0xb3, 0x52, 0xa3, 0x50, 0x65, 0xf6, 0xf7, 0xf7, 0x92, 0xa3, 0x70,
	0x2d, 0x7e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x8b, 0xc9, 0xc7, 0xd7, 0x93, 0x03, 0x00, 0x00,
}
