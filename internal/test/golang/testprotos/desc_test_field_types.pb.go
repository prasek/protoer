// Code generated by protoc-gen-go. DO NOT EDIT.
// source: desc_test_field_types.proto

package testprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type TestEnum int32

const (
	TestEnum_INVALID TestEnum = 0
	TestEnum_FIRST   TestEnum = 1
	TestEnum_SECOND  TestEnum = 2
	TestEnum_THIRD   TestEnum = 3
)

var TestEnum_name = map[int32]string{
	0: "INVALID",
	1: "FIRST",
	2: "SECOND",
	3: "THIRD",
}
var TestEnum_value = map[string]int32{
	"INVALID": 0,
	"FIRST":   1,
	"SECOND":  2,
	"THIRD":   3,
}

func (x TestEnum) Enum() *TestEnum {
	p := new(TestEnum)
	*p = x
	return p
}
func (x TestEnum) String() string {
	return proto.EnumName(TestEnum_name, int32(x))
}
func (x *TestEnum) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TestEnum_value, data, "TestEnum")
	if err != nil {
		return err
	}
	*x = TestEnum(value)
	return nil
}
func (TestEnum) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type UnaryFields struct {
	I                *int32              `protobuf:"varint,1,opt,name=i" json:"i,omitempty"`
	J                *int64              `protobuf:"varint,2,opt,name=j" json:"j,omitempty"`
	K                *int32              `protobuf:"zigzag32,3,opt,name=k" json:"k,omitempty"`
	L                *int64              `protobuf:"zigzag64,4,opt,name=l" json:"l,omitempty"`
	M                *uint32             `protobuf:"varint,5,opt,name=m" json:"m,omitempty"`
	N                *uint64             `protobuf:"varint,6,opt,name=n" json:"n,omitempty"`
	O                *uint32             `protobuf:"fixed32,7,opt,name=o" json:"o,omitempty"`
	P                *uint64             `protobuf:"fixed64,8,opt,name=p" json:"p,omitempty"`
	Q                *int32              `protobuf:"fixed32,9,opt,name=q" json:"q,omitempty"`
	R                *int64              `protobuf:"fixed64,10,opt,name=r" json:"r,omitempty"`
	S                *float32            `protobuf:"fixed32,11,opt,name=s" json:"s,omitempty"`
	T                *float64            `protobuf:"fixed64,12,opt,name=t" json:"t,omitempty"`
	U                []byte              `protobuf:"bytes,13,opt,name=u" json:"u,omitempty"`
	V                *string             `protobuf:"bytes,14,opt,name=v" json:"v,omitempty"`
	W                *bool               `protobuf:"varint,15,opt,name=w" json:"w,omitempty"`
	X                *RepeatedFields     `protobuf:"bytes,16,opt,name=x" json:"x,omitempty"`
	Groupy           *UnaryFields_GroupY `protobuf:"group,17,opt,name=GroupY,json=groupy" json:"groupy,omitempty"`
	Z                *TestEnum           `protobuf:"varint,18,opt,name=z,enum=testprotos.TestEnum" json:"z,omitempty"`
	XXX_unrecognized []byte              `json:"-"`
}

func (m *UnaryFields) Reset()                    { *m = UnaryFields{} }
func (m *UnaryFields) String() string            { return proto.CompactTextString(m) }
func (*UnaryFields) ProtoMessage()               {}
func (*UnaryFields) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *UnaryFields) GetI() int32 {
	if m != nil && m.I != nil {
		return *m.I
	}
	return 0
}

func (m *UnaryFields) GetJ() int64 {
	if m != nil && m.J != nil {
		return *m.J
	}
	return 0
}

func (m *UnaryFields) GetK() int32 {
	if m != nil && m.K != nil {
		return *m.K
	}
	return 0
}

func (m *UnaryFields) GetL() int64 {
	if m != nil && m.L != nil {
		return *m.L
	}
	return 0
}

func (m *UnaryFields) GetM() uint32 {
	if m != nil && m.M != nil {
		return *m.M
	}
	return 0
}

func (m *UnaryFields) GetN() uint64 {
	if m != nil && m.N != nil {
		return *m.N
	}
	return 0
}

func (m *UnaryFields) GetO() uint32 {
	if m != nil && m.O != nil {
		return *m.O
	}
	return 0
}

func (m *UnaryFields) GetP() uint64 {
	if m != nil && m.P != nil {
		return *m.P
	}
	return 0
}

func (m *UnaryFields) GetQ() int32 {
	if m != nil && m.Q != nil {
		return *m.Q
	}
	return 0
}

func (m *UnaryFields) GetR() int64 {
	if m != nil && m.R != nil {
		return *m.R
	}
	return 0
}

func (m *UnaryFields) GetS() float32 {
	if m != nil && m.S != nil {
		return *m.S
	}
	return 0
}

func (m *UnaryFields) GetT() float64 {
	if m != nil && m.T != nil {
		return *m.T
	}
	return 0
}

func (m *UnaryFields) GetU() []byte {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *UnaryFields) GetV() string {
	if m != nil && m.V != nil {
		return *m.V
	}
	return ""
}

func (m *UnaryFields) GetW() bool {
	if m != nil && m.W != nil {
		return *m.W
	}
	return false
}

func (m *UnaryFields) GetX() *RepeatedFields {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *UnaryFields) GetGroupy() *UnaryFields_GroupY {
	if m != nil {
		return m.Groupy
	}
	return nil
}

func (m *UnaryFields) GetZ() TestEnum {
	if m != nil && m.Z != nil {
		return *m.Z
	}
	return TestEnum_INVALID
}

type UnaryFields_GroupY struct {
	Ya               *string `protobuf:"bytes,171,opt,name=ya" json:"ya,omitempty"`
	Yb               *int32  `protobuf:"varint,172,opt,name=yb" json:"yb,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *UnaryFields_GroupY) Reset()                    { *m = UnaryFields_GroupY{} }
func (m *UnaryFields_GroupY) String() string            { return proto.CompactTextString(m) }
func (*UnaryFields_GroupY) ProtoMessage()               {}
func (*UnaryFields_GroupY) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0, 0} }

func (m *UnaryFields_GroupY) GetYa() string {
	if m != nil && m.Ya != nil {
		return *m.Ya
	}
	return ""
}

func (m *UnaryFields_GroupY) GetYb() int32 {
	if m != nil && m.Yb != nil {
		return *m.Yb
	}
	return 0
}

type RepeatedFields struct {
	I                []int32                  `protobuf:"varint,1,rep,name=i" json:"i,omitempty"`
	J                []int64                  `protobuf:"varint,2,rep,name=j" json:"j,omitempty"`
	K                []int32                  `protobuf:"zigzag32,3,rep,name=k" json:"k,omitempty"`
	L                []int64                  `protobuf:"zigzag64,4,rep,name=l" json:"l,omitempty"`
	M                []uint32                 `protobuf:"varint,5,rep,name=m" json:"m,omitempty"`
	N                []uint64                 `protobuf:"varint,6,rep,name=n" json:"n,omitempty"`
	O                []uint32                 `protobuf:"fixed32,7,rep,name=o" json:"o,omitempty"`
	P                []uint64                 `protobuf:"fixed64,8,rep,name=p" json:"p,omitempty"`
	Q                []int32                  `protobuf:"fixed32,9,rep,name=q" json:"q,omitempty"`
	R                []int64                  `protobuf:"fixed64,10,rep,name=r" json:"r,omitempty"`
	S                []float32                `protobuf:"fixed32,11,rep,name=s" json:"s,omitempty"`
	T                []float64                `protobuf:"fixed64,12,rep,name=t" json:"t,omitempty"`
	U                [][]byte                 `protobuf:"bytes,13,rep,name=u" json:"u,omitempty"`
	V                []string                 `protobuf:"bytes,14,rep,name=v" json:"v,omitempty"`
	W                []bool                   `protobuf:"varint,15,rep,name=w" json:"w,omitempty"`
	X                []*UnaryFields           `protobuf:"bytes,16,rep,name=x" json:"x,omitempty"`
	Groupy           []*RepeatedFields_GroupY `protobuf:"group,17,rep,name=GroupY,json=groupy" json:"groupy,omitempty"`
	Z                []TestEnum               `protobuf:"varint,18,rep,name=z,enum=testprotos.TestEnum" json:"z,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *RepeatedFields) Reset()                    { *m = RepeatedFields{} }
func (m *RepeatedFields) String() string            { return proto.CompactTextString(m) }
func (*RepeatedFields) ProtoMessage()               {}
func (*RepeatedFields) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *RepeatedFields) GetI() []int32 {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *RepeatedFields) GetJ() []int64 {
	if m != nil {
		return m.J
	}
	return nil
}

func (m *RepeatedFields) GetK() []int32 {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *RepeatedFields) GetL() []int64 {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *RepeatedFields) GetM() []uint32 {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *RepeatedFields) GetN() []uint64 {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *RepeatedFields) GetO() []uint32 {
	if m != nil {
		return m.O
	}
	return nil
}

func (m *RepeatedFields) GetP() []uint64 {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RepeatedFields) GetQ() []int32 {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RepeatedFields) GetR() []int64 {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *RepeatedFields) GetS() []float32 {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *RepeatedFields) GetT() []float64 {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *RepeatedFields) GetU() [][]byte {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *RepeatedFields) GetV() []string {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *RepeatedFields) GetW() []bool {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *RepeatedFields) GetX() []*UnaryFields {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *RepeatedFields) GetGroupy() []*RepeatedFields_GroupY {
	if m != nil {
		return m.Groupy
	}
	return nil
}

func (m *RepeatedFields) GetZ() []TestEnum {
	if m != nil {
		return m.Z
	}
	return nil
}

type RepeatedFields_GroupY struct {
	Ya               *string `protobuf:"bytes,171,opt,name=ya" json:"ya,omitempty"`
	Yb               *int32  `protobuf:"varint,172,opt,name=yb" json:"yb,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepeatedFields_GroupY) Reset()                    { *m = RepeatedFields_GroupY{} }
func (m *RepeatedFields_GroupY) String() string            { return proto.CompactTextString(m) }
func (*RepeatedFields_GroupY) ProtoMessage()               {}
func (*RepeatedFields_GroupY) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1, 0} }

func (m *RepeatedFields_GroupY) GetYa() string {
	if m != nil && m.Ya != nil {
		return *m.Ya
	}
	return ""
}

func (m *RepeatedFields_GroupY) GetYb() int32 {
	if m != nil && m.Yb != nil {
		return *m.Yb
	}
	return 0
}

type RepeatedPackedFields struct {
	I                []int32                        `protobuf:"varint,1,rep,packed,name=i" json:"i,omitempty"`
	J                []int64                        `protobuf:"varint,2,rep,packed,name=j" json:"j,omitempty"`
	K                []int32                        `protobuf:"zigzag32,3,rep,packed,name=k" json:"k,omitempty"`
	L                []int64                        `protobuf:"zigzag64,4,rep,packed,name=l" json:"l,omitempty"`
	M                []uint32                       `protobuf:"varint,5,rep,packed,name=m" json:"m,omitempty"`
	N                []uint64                       `protobuf:"varint,6,rep,packed,name=n" json:"n,omitempty"`
	O                []uint32                       `protobuf:"fixed32,7,rep,packed,name=o" json:"o,omitempty"`
	P                []uint64                       `protobuf:"fixed64,8,rep,packed,name=p" json:"p,omitempty"`
	Q                []int32                        `protobuf:"fixed32,9,rep,packed,name=q" json:"q,omitempty"`
	R                []int64                        `protobuf:"fixed64,10,rep,packed,name=r" json:"r,omitempty"`
	S                []float32                      `protobuf:"fixed32,11,rep,packed,name=s" json:"s,omitempty"`
	T                []float64                      `protobuf:"fixed64,12,rep,packed,name=t" json:"t,omitempty"`
	U                []bool                         `protobuf:"varint,13,rep,packed,name=u" json:"u,omitempty"`
	Groupy           []*RepeatedPackedFields_GroupY `protobuf:"group,14,rep,name=GroupY,json=groupy" json:"groupy,omitempty"`
	V                []TestEnum                     `protobuf:"varint,15,rep,packed,name=v,enum=testprotos.TestEnum" json:"v,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *RepeatedPackedFields) Reset()                    { *m = RepeatedPackedFields{} }
func (m *RepeatedPackedFields) String() string            { return proto.CompactTextString(m) }
func (*RepeatedPackedFields) ProtoMessage()               {}
func (*RepeatedPackedFields) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *RepeatedPackedFields) GetI() []int32 {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *RepeatedPackedFields) GetJ() []int64 {
	if m != nil {
		return m.J
	}
	return nil
}

func (m *RepeatedPackedFields) GetK() []int32 {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *RepeatedPackedFields) GetL() []int64 {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *RepeatedPackedFields) GetM() []uint32 {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *RepeatedPackedFields) GetN() []uint64 {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *RepeatedPackedFields) GetO() []uint32 {
	if m != nil {
		return m.O
	}
	return nil
}

func (m *RepeatedPackedFields) GetP() []uint64 {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *RepeatedPackedFields) GetQ() []int32 {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *RepeatedPackedFields) GetR() []int64 {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *RepeatedPackedFields) GetS() []float32 {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *RepeatedPackedFields) GetT() []float64 {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *RepeatedPackedFields) GetU() []bool {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *RepeatedPackedFields) GetGroupy() []*RepeatedPackedFields_GroupY {
	if m != nil {
		return m.Groupy
	}
	return nil
}

func (m *RepeatedPackedFields) GetV() []TestEnum {
	if m != nil {
		return m.V
	}
	return nil
}

type RepeatedPackedFields_GroupY struct {
	Yb               []int32 `protobuf:"varint,141,rep,packed,name=yb" json:"yb,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepeatedPackedFields_GroupY) Reset()                    { *m = RepeatedPackedFields_GroupY{} }
func (m *RepeatedPackedFields_GroupY) String() string            { return proto.CompactTextString(m) }
func (*RepeatedPackedFields_GroupY) ProtoMessage()               {}
func (*RepeatedPackedFields_GroupY) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2, 0} }

func (m *RepeatedPackedFields_GroupY) GetYb() []int32 {
	if m != nil {
		return m.Yb
	}
	return nil
}

type MapKeyFields struct {
	I                map[int32]string  `protobuf:"bytes,1,rep,name=i" json:"i,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	J                map[int64]string  `protobuf:"bytes,2,rep,name=j" json:"j,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	K                map[int32]string  `protobuf:"bytes,3,rep,name=k" json:"k,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	L                map[int64]string  `protobuf:"bytes,4,rep,name=l" json:"l,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	M                map[uint32]string `protobuf:"bytes,5,rep,name=m" json:"m,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	N                map[uint64]string `protobuf:"bytes,6,rep,name=n" json:"n,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	O                map[uint32]string `protobuf:"bytes,7,rep,name=o" json:"o,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	P                map[uint64]string `protobuf:"bytes,8,rep,name=p" json:"p,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Q                map[int32]string  `protobuf:"bytes,9,rep,name=q" json:"q,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	R                map[int64]string  `protobuf:"bytes,10,rep,name=r" json:"r,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	S                map[string]string `protobuf:"bytes,11,rep,name=s" json:"s,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	T                map[bool]string   `protobuf:"bytes,12,rep,name=t" json:"t,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *MapKeyFields) Reset()                    { *m = MapKeyFields{} }
func (m *MapKeyFields) String() string            { return proto.CompactTextString(m) }
func (*MapKeyFields) ProtoMessage()               {}
func (*MapKeyFields) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *MapKeyFields) GetI() map[int32]string {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *MapKeyFields) GetJ() map[int64]string {
	if m != nil {
		return m.J
	}
	return nil
}

func (m *MapKeyFields) GetK() map[int32]string {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *MapKeyFields) GetL() map[int64]string {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *MapKeyFields) GetM() map[uint32]string {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *MapKeyFields) GetN() map[uint64]string {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *MapKeyFields) GetO() map[uint32]string {
	if m != nil {
		return m.O
	}
	return nil
}

func (m *MapKeyFields) GetP() map[uint64]string {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *MapKeyFields) GetQ() map[int32]string {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *MapKeyFields) GetR() map[int64]string {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *MapKeyFields) GetS() map[string]string {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *MapKeyFields) GetT() map[bool]string {
	if m != nil {
		return m.T
	}
	return nil
}

type MapValFields struct {
	I                map[string]int32        `protobuf:"bytes,1,rep,name=i" json:"i,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	J                map[string]int64        `protobuf:"bytes,2,rep,name=j" json:"j,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	K                map[string]int32        `protobuf:"bytes,3,rep,name=k" json:"k,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	L                map[string]int64        `protobuf:"bytes,4,rep,name=l" json:"l,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	M                map[string]uint32       `protobuf:"bytes,5,rep,name=m" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	N                map[string]uint64       `protobuf:"bytes,6,rep,name=n" json:"n,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	O                map[string]uint32       `protobuf:"bytes,7,rep,name=o" json:"o,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	P                map[string]uint64       `protobuf:"bytes,8,rep,name=p" json:"p,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Q                map[string]int32        `protobuf:"bytes,9,rep,name=q" json:"q,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	R                map[string]int64        `protobuf:"bytes,10,rep,name=r" json:"r,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	S                map[string]float32      `protobuf:"bytes,11,rep,name=s" json:"s,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	T                map[string]float64      `protobuf:"bytes,12,rep,name=t" json:"t,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	U                map[string][]byte       `protobuf:"bytes,13,rep,name=u" json:"u,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	V                map[string]string       `protobuf:"bytes,14,rep,name=v" json:"v,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	W                map[string]bool         `protobuf:"bytes,15,rep,name=w" json:"w,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	X                map[string]*UnaryFields `protobuf:"bytes,16,rep,name=x" json:"x,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Y                map[string]TestEnum     `protobuf:"bytes,17,rep,name=y" json:"y,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=testprotos.TestEnum"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *MapValFields) Reset()                    { *m = MapValFields{} }
func (m *MapValFields) String() string            { return proto.CompactTextString(m) }
func (*MapValFields) ProtoMessage()               {}
func (*MapValFields) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *MapValFields) GetI() map[string]int32 {
	if m != nil {
		return m.I
	}
	return nil
}

func (m *MapValFields) GetJ() map[string]int64 {
	if m != nil {
		return m.J
	}
	return nil
}

func (m *MapValFields) GetK() map[string]int32 {
	if m != nil {
		return m.K
	}
	return nil
}

func (m *MapValFields) GetL() map[string]int64 {
	if m != nil {
		return m.L
	}
	return nil
}

func (m *MapValFields) GetM() map[string]uint32 {
	if m != nil {
		return m.M
	}
	return nil
}

func (m *MapValFields) GetN() map[string]uint64 {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *MapValFields) GetO() map[string]uint32 {
	if m != nil {
		return m.O
	}
	return nil
}

func (m *MapValFields) GetP() map[string]uint64 {
	if m != nil {
		return m.P
	}
	return nil
}

func (m *MapValFields) GetQ() map[string]int32 {
	if m != nil {
		return m.Q
	}
	return nil
}

func (m *MapValFields) GetR() map[string]int64 {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *MapValFields) GetS() map[string]float32 {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *MapValFields) GetT() map[string]float64 {
	if m != nil {
		return m.T
	}
	return nil
}

func (m *MapValFields) GetU() map[string][]byte {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *MapValFields) GetV() map[string]string {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *MapValFields) GetW() map[string]bool {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *MapValFields) GetX() map[string]*UnaryFields {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *MapValFields) GetY() map[string]TestEnum {
	if m != nil {
		return m.Y
	}
	return nil
}

func init() {
	proto.RegisterType((*UnaryFields)(nil), "testprotos.UnaryFields")
	proto.RegisterType((*UnaryFields_GroupY)(nil), "testprotos.UnaryFields.GroupY")
	proto.RegisterType((*RepeatedFields)(nil), "testprotos.RepeatedFields")
	proto.RegisterType((*RepeatedFields_GroupY)(nil), "testprotos.RepeatedFields.GroupY")
	proto.RegisterType((*RepeatedPackedFields)(nil), "testprotos.RepeatedPackedFields")
	proto.RegisterType((*RepeatedPackedFields_GroupY)(nil), "testprotos.RepeatedPackedFields.GroupY")
	proto.RegisterType((*MapKeyFields)(nil), "testprotos.MapKeyFields")
	proto.RegisterType((*MapValFields)(nil), "testprotos.MapValFields")
	proto.RegisterEnum("testprotos.TestEnum", TestEnum_name, TestEnum_value)
}

func init() { proto.RegisterFile("desc_test_field_types.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1086 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0xc7, 0x7b, 0x32, 0x10, 0x92, 0x09, 0x10, 0xe3, 0x22, 0x75, 0x44, 0xd5, 0xd6, 0x45, 0x6a,
	0x3b, 0x42, 0x22, 0x48, 0x51, 0x55, 0xed, 0xee, 0x4d, 0xd5, 0x2d, 0xbb, 0x2d, 0xdf, 0xec, 0xf0,
	0xb1, 0x4b, 0x6f, 0x90, 0x01, 0x2f, 0x0b, 0x71, 0x1c, 0xe3, 0x38, 0x81, 0xec, 0x13, 0xf4, 0xa6,
	0x17, 0x95, 0xfa, 0x16, 0xed, 0x93, 0xf4, 0x71, 0xfa, 0x04, 0xd5, 0xf1, 0x4c, 0x62, 0x1b, 0x3b,
	0xf6, 0x68, 0xb5, 0x77, 0x9c, 0xa3, 0xdf, 0xdf, 0x49, 0xfc, 0x1b, 0xfe, 0x71, 0xe8, 0xe7, 0x57,
	0x4e, 0xff, 0xf2, 0x3c, 0x74, 0xfa, 0xe1, 0xf9, 0xdb, 0x1b, 0xc7, 0xbd, 0x3a, 0x0f, 0x47, 0xbe,
	0xd3, 0x6f, 0xf9, 0x41, 0x2f, 0xec, 0x99, 0x14, 0xf7, 0xd1, 0x9f, 0xfd, 0xd5, 0x3f, 0x09, 0x6d,
	0x9c, 0x78, 0x76, 0x30, 0x7a, 0x89, 0x58, 0xdf, 0x9c, 0xa7, 0x70, 0xc3, 0xc0, 0x02, 0x3e, 0x2b,
	0xe0, 0x06, 0xa7, 0x5b, 0x56, 0xb1, 0x80, 0x13, 0x01, 0xb7, 0x38, 0x75, 0x18, 0xb1, 0x80, 0x2f,
	0x09, 0xe8, 0xe0, 0xe4, 0xb2, 0x19, 0x0b, 0xb8, 0x29, 0xc0, 0xc5, 0xa9, 0xcb, 0x66, 0x2d, 0xe0,
	0x0b, 0x02, 0xba, 0x38, 0x79, 0xac, 0x6a, 0x01, 0x9f, 0x11, 0xe0, 0xe1, 0xd4, 0x63, 0x73, 0x16,
	0xf0, 0x39, 0x01, 0x3d, 0x9c, 0x7c, 0x56, 0xb3, 0x80, 0x57, 0x05, 0xf8, 0x38, 0xdd, 0xb1, 0xba,
	0x05, 0xbc, 0x29, 0xe0, 0x0e, 0xa7, 0x80, 0x51, 0x0b, 0xb8, 0x21, 0x20, 0xc0, 0xa9, 0xcf, 0x1a,
	0x16, 0xf0, 0x8a, 0x80, 0xe8, 0x9d, 0x85, 0x6c, 0xde, 0x02, 0x0e, 0x02, 0x42, 0x9c, 0x06, 0x6c,
	0xc1, 0x02, 0x3e, 0x2f, 0x60, 0x80, 0xd3, 0x90, 0x2d, 0x5a, 0xc0, 0xeb, 0x02, 0x86, 0x38, 0xdd,
	0xb3, 0xa6, 0x05, 0xbc, 0x26, 0xe0, 0xde, 0xe4, 0x14, 0x1e, 0x98, 0x61, 0x01, 0x6f, 0xb4, 0x57,
	0x5a, 0xf1, 0x27, 0x6f, 0x09, 0xc7, 0x77, 0xec, 0xd0, 0xb9, 0x92, 0x1f, 0x5c, 0xc0, 0x83, 0xf9,
	0x03, 0xad, 0x5e, 0x07, 0xbd, 0x81, 0x3f, 0x62, 0x4b, 0x16, 0x70, 0xda, 0xfe, 0x32, 0x89, 0x27,
	0x6e, 0x52, 0xeb, 0x17, 0xa4, 0xce, 0x84, 0xa2, 0xcd, 0x55, 0x0a, 0xef, 0x99, 0x69, 0x01, 0x5f,
	0x6c, 0x2f, 0x27, 0x23, 0xc7, 0x4e, 0x3f, 0x7c, 0xe1, 0x0d, 0xba, 0x02, 0xde, 0xaf, 0xac, 0xd1,
	0xaa, 0x4c, 0x99, 0x4d, 0x5a, 0x19, 0xd9, 0xec, 0x6f, 0x88, 0xde, 0x6d, 0x65, 0x64, 0x47, 0x8b,
	0x0b, 0xf6, 0x8f, 0xbc, 0xe9, 0x95, 0xd1, 0xc5, 0xea, 0x5f, 0x84, 0x2e, 0xa6, 0xdf, 0xdd, 0x58,
	0x0b, 0x49, 0x69, 0x21, 0x29, 0x2d, 0x24, 0xa5, 0x85, 0xa4, 0xb4, 0x90, 0x94, 0x16, 0x92, 0xd2,
	0x42, 0x52, 0x5a, 0x48, 0x4a, 0x0b, 0x49, 0x69, 0x21, 0x29, 0x2d, 0x24, 0xa5, 0x85, 0xa4, 0xb4,
	0x90, 0x94, 0x16, 0x92, 0xd2, 0x42, 0xa4, 0x96, 0x6f, 0xa4, 0x16, 0xc2, 0x1b, 0xed, 0xcf, 0xa6,
	0xdc, 0x67, 0x74, 0xf2, 0x34, 0xe1, 0x84, 0x70, 0xda, 0xfe, 0x7a, 0xba, 0xc2, 0x29, 0x5a, 0xc8,
	0xc7, 0xd2, 0xf2, 0x3b, 0xa1, 0xcb, 0xe3, 0x57, 0x3c, 0xb4, 0x2f, 0x3b, 0x13, 0x39, 0xc6, 0x44,
	0xce, 0xf3, 0x8a, 0x01, 0x28, 0xc8, 0x98, 0x08, 0x92, 0x9b, 0x5b, 0xdc, 0x28, 0x49, 0x72, 0xd3,
	0xc1, 0x8d, 0x12, 0x25, 0x37, 0x2e, 0x6e, 0x94, 0x2c, 0xb9, 0xe9, 0xe2, 0x46, 0x09, 0x93, 0x1b,
	0x0f, 0x37, 0x4a, 0x9a, 0xdc, 0xf4, 0x70, 0xa3, 0xc4, 0xc9, 0x8d, 0x8f, 0x1b, 0x25, 0x4f, 0x6e,
	0xee, 0x70, 0xa3, 0x04, 0xca, 0x4d, 0x80, 0x1b, 0x25, 0x51, 0x6e, 0xa2, 0x4f, 0xa1, 0x44, 0xca,
	0x4d, 0x88, 0x1b, 0x29, 0xb3, 0x26, 0x37, 0x03, 0xf3, 0xc7, 0x89, 0x8d, 0xc5, 0xc8, 0xc6, 0x77,
	0x79, 0x36, 0x92, 0xf7, 0xe6, 0xb1, 0x93, 0x6f, 0xf1, 0x44, 0x34, 0xa7, 0x3b, 0x91, 0x2f, 0x34,
	0x5c, 0xf9, 0x62, 0xe2, 0xe5, 0xd3, 0x48, 0xc3, 0x1f, 0xf1, 0xed, 0x45, 0x15, 0xff, 0xd6, 0xe9,
	0xfc, 0x9e, 0xed, 0xef, 0x38, 0xe3, 0xda, 0x5a, 0x1f, 0x2b, 0x68, 0xb4, 0xbf, 0x4a, 0x5e, 0x37,
	0x09, 0xb5, 0xb6, 0x5e, 0x78, 0x61, 0x30, 0x42, 0x3f, 0xeb, 0x63, 0x3f, 0x45, 0xf8, 0xb6, 0xc2,
	0x6f, 0x11, 0x97, 0xf2, 0x8a, 0xf0, 0x1d, 0x85, 0x77, 0x10, 0x97, 0x66, 0x8b, 0xf0, 0x5d, 0x85,
	0xbb, 0x88, 0x4b, 0xed, 0x45, 0xf8, 0x9e, 0xc2, 0xbb, 0x88, 0xcb, 0x33, 0x51, 0x84, 0xef, 0x2b,
	0xdc, 0x43, 0x5c, 0x1e, 0x98, 0x22, 0xfc, 0x40, 0xe1, 0x3d, 0xc4, 0xe5, 0x69, 0x2a, 0xc2, 0x0f,
	0x15, 0xee, 0x23, 0x2e, 0x8f, 0x5a, 0x11, 0xfe, 0x4a, 0xe1, 0x77, 0x88, 0xcb, 0x73, 0x58, 0x84,
	0x0b, 0x85, 0x07, 0x88, 0xcb, 0x43, 0x5a, 0x84, 0x1f, 0x29, 0x3c, 0x3a, 0x04, 0xf2, 0x04, 0x17,
	0xe1, 0xc7, 0x0a, 0x0f, 0x57, 0xbe, 0xa7, 0x55, 0x79, 0x22, 0x4c, 0x83, 0x92, 0x8e, 0x33, 0x52,
	0x5f, 0x7b, 0xf8, 0xa7, 0xb9, 0x4c, 0x67, 0x87, 0xb6, 0x3b, 0x70, 0xa2, 0x2f, 0xbf, 0xba, 0x90,
	0xc3, 0xb3, 0xca, 0x13, 0xc0, 0xd4, 0x76, 0x26, 0x45, 0x34, 0x52, 0x3b, 0x99, 0xd4, 0x92, 0x46,
	0x6a, 0x37, 0x93, 0x32, 0x35, 0x52, 0x7b, 0x99, 0xd4, 0x82, 0x46, 0x6a, 0x3f, 0x93, 0x9a, 0xd1,
	0x48, 0x1d, 0x64, 0x52, 0x73, 0x1a, 0xa9, 0xc3, 0x4c, 0xaa, 0xaa, 0x91, 0x7a, 0x95, 0x49, 0x35,
	0x35, 0x52, 0x22, 0x93, 0x32, 0x34, 0x52, 0x47, 0x99, 0x54, 0x5d, 0x23, 0x75, 0x9c, 0x49, 0xd5,
	0x4a, 0x52, 0xab, 0xff, 0x2d, 0x44, 0x65, 0x76, 0x6a, 0xbb, 0xe5, 0x65, 0x36, 0x81, 0xf4, 0xca,
	0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0xb5, 0xca,
	0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0xb5, 0xca,
	0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0xb5, 0xca, 0x2c, 0xc6, 0x27, 0x65, 0x86, 0xb8, 0xfc, 0xae,
	0x2e, 0xc2, 0x4f, 0x14, 0x3e, 0x40, 0x5c, 0x3e, 0x99, 0x15, 0xe1, 0xa7, 0x0a, 0x1f, 0x22, 0x2e,
	0x1f, 0xdd, 0x8a, 0xf0, 0xd7, 0x0a, 0xbf, 0x47, 0x7c, 0xfc, 0x6c, 0x37, 0x1d, 0x7f, 0xa3, 0xf0,
	0x07, 0xc4, 0xe5, 0xe3, 0x5d, 0x11, 0x7e, 0xa6, 0xf0, 0x51, 0x7e, 0x6f, 0xe7, 0xfd, 0x6f, 0xce,
	0x96, 0xf6, 0x76, 0x5e, 0x8a, 0x94, 0xf6, 0x76, 0x5e, 0x6a, 0xa9, 0xb4, 0xb7, 0xf3, 0x52, 0x66,
	0x69, 0x6f, 0xe7, 0xa5, 0x16, 0x4a, 0x7b, 0x3b, 0x2f, 0x35, 0x53, 0xda, 0xdb, 0x79, 0xa9, 0xb9,
	0xd2, 0xde, 0xce, 0x4b, 0x55, 0x4b, 0x7b, 0x3b, 0x2f, 0xd5, 0x2c, 0xed, 0xed, 0xbc, 0x94, 0xf1,
	0x41, 0xbd, 0x5d, 0x29, 0xed, 0xed, 0xbc, 0x14, 0x3c, 0x4a, 0x9d, 0x68, 0xa5, 0xe6, 0x1f, 0xa5,
	0x4e, 0x3f, 0xe8, 0x9b, 0xe5, 0xb5, 0x56, 0xaa, 0x96, 0x4c, 0xed, 0xd1, 0xea, 0x9b, 0x69, 0xa9,
	0xf5, 0x64, 0xaa, 0xe0, 0x37, 0x58, 0xe2, 0x72, 0xdb, 0xb4, 0x7a, 0x36, 0xed, 0x72, 0x6b, 0xc9,
	0xcb, 0x4d, 0xfb, 0xc1, 0x15, 0x5f, 0x6b, 0xed, 0x29, 0xad, 0x8d, 0xd7, 0x66, 0x83, 0xce, 0x6d,
	0xed, 0x9f, 0xfe, 0xb4, 0xbb, 0xb5, 0x69, 0x7c, 0x62, 0xd6, 0xe9, 0xec, 0xcb, 0x2d, 0x71, 0x74,
	0x6c, 0x80, 0x49, 0x51, 0xe6, 0xcf, 0x07, 0xfb, 0x9b, 0x46, 0x05, 0xd7, 0xc7, 0xbf, 0x6e, 0x89,
	0x4d, 0x83, 0x3c, 0x7f, 0xf6, 0xdb, 0x93, 0xeb, 0x9b, 0xf0, 0xdd, 0xe0, 0xa2, 0x75, 0xd9, 0xeb,
	0x6e, 0xdc, 0xbe, 0x1b, 0x74, 0xfd, 0x8d, 0xe8, 0x95, 0x02, 0xe7, 0xad, 0xeb, 0x5c, 0x86, 0x1b,
	0x37, 0x5e, 0xe8, 0x04, 0x9e, 0xed, 0x6e, 0x5c, 0xf7, 0x5c, 0xdb, 0xbb, 0xde, 0x88, 0xdf, 0xca,
	0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xaf, 0xaf, 0xc5, 0x18, 0x11, 0x00, 0x00,
}
