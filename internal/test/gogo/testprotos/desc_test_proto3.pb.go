// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: desc_test_proto3.proto

package testprotos

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import jhump_protoreflect_desc "github.com/prasek/protoer/internal/test/gogo/testprotos/pkg"
import google_protobuf1 "github.com/gogo/protobuf/protoc-gen-gogo/descriptor"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Proto3Enum int32

const (
	Proto3Enum_UNKNOWN Proto3Enum = 0
	Proto3Enum_VALUE1  Proto3Enum = 1
	Proto3Enum_VALUE2  Proto3Enum = 2
)

var Proto3Enum_name = map[int32]string{
	0: "UNKNOWN",
	1: "VALUE1",
	2: "VALUE2",
}
var Proto3Enum_value = map[string]int32{
	"UNKNOWN": 0,
	"VALUE1":  1,
	"VALUE2":  2,
}

func (x Proto3Enum) String() string {
	return proto.EnumName(Proto3Enum_name, int32(x))
}
func (Proto3Enum) EnumDescriptor() ([]byte, []int) { return fileDescriptorDescTestProto3, []int{0} }

type TestRequest struct {
	Foo   []Proto3Enum                                    `protobuf:"varint,1,rep,packed,name=foo,enum=testprotos.Proto3Enum" json:"foo,omitempty"`
	Bar   string                                          `protobuf:"bytes,2,opt,name=bar,proto3" json:"bar,omitempty"`
	Baz   *TestMessage                                    `protobuf:"bytes,3,opt,name=baz" json:"baz,omitempty"`
	Snafu *TestMessage_NestedMessage_AnotherNestedMessage `protobuf:"bytes,4,opt,name=snafu" json:"snafu,omitempty"`
	Flags map[string]bool                                 `protobuf:"bytes,5,rep,name=flags" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptorDescTestProto3, []int{0} }

func (m *TestRequest) GetFoo() []Proto3Enum {
	if m != nil {
		return m.Foo
	}
	return nil
}

func (m *TestRequest) GetBar() string {
	if m != nil {
		return m.Bar
	}
	return ""
}

func (m *TestRequest) GetBaz() *TestMessage {
	if m != nil {
		return m.Baz
	}
	return nil
}

func (m *TestRequest) GetSnafu() *TestMessage_NestedMessage_AnotherNestedMessage {
	if m != nil {
		return m.Snafu
	}
	return nil
}

func (m *TestRequest) GetFlags() map[string]bool {
	if m != nil {
		return m.Flags
	}
	return nil
}

type TestResponse struct {
	Atm *AnotherTestMessage `protobuf:"bytes,1,opt,name=atm" json:"atm,omitempty"`
	Vs  []int32             `protobuf:"varint,2,rep,packed,name=vs" json:"vs,omitempty"`
}

func (m *TestResponse) Reset()                    { *m = TestResponse{} }
func (m *TestResponse) String() string            { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()               {}
func (*TestResponse) Descriptor() ([]byte, []int) { return fileDescriptorDescTestProto3, []int{1} }

func (m *TestResponse) GetAtm() *AnotherTestMessage {
	if m != nil {
		return m.Atm
	}
	return nil
}

func (m *TestResponse) GetVs() []int32 {
	if m != nil {
		return m.Vs
	}
	return nil
}

type CustomOption struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value int32  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *CustomOption) Reset()                    { *m = CustomOption{} }
func (m *CustomOption) String() string            { return proto.CompactTextString(m) }
func (*CustomOption) ProtoMessage()               {}
func (*CustomOption) Descriptor() ([]byte, []int) { return fileDescriptorDescTestProto3, []int{2} }

func (m *CustomOption) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CustomOption) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

var E_Custom = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.MethodOptions)(nil),
	ExtensionType: (*bool)(nil),
	Field:         50059,
	Name:          "testprotos.custom",
	Tag:           "varint,50059,opt,name=custom",
	Filename:      "desc_test_proto3.proto",
}

var E_Custom2 = &proto.ExtensionDesc{
	ExtendedType:  (*google_protobuf1.MethodOptions)(nil),
	ExtensionType: (*CustomOption)(nil),
	Field:         50060,
	Name:          "testprotos.custom2",
	Tag:           "bytes,50060,opt,name=custom2",
	Filename:      "desc_test_proto3.proto",
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "testprotos.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "testprotos.TestResponse")
	proto.RegisterType((*CustomOption)(nil), "testprotos.CustomOption")
	proto.RegisterEnum("testprotos.Proto3Enum", Proto3Enum_name, Proto3Enum_value)
	proto.RegisterExtension(E_Custom)
	proto.RegisterExtension(E_Custom2)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TestService service

type TestServiceClient interface {
	DoSomething(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*jhump_protoreflect_desc.Bar, error)
	DoSomethingElse(ctx context.Context, opts ...grpc.CallOption) (TestService_DoSomethingElseClient, error)
	DoSomethingAgain(ctx context.Context, in *jhump_protoreflect_desc.Bar, opts ...grpc.CallOption) (TestService_DoSomethingAgainClient, error)
	DoSomethingForever(ctx context.Context, opts ...grpc.CallOption) (TestService_DoSomethingForeverClient, error)
}

type testServiceClient struct {
	cc *grpc.ClientConn
}

func NewTestServiceClient(cc *grpc.ClientConn) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) DoSomething(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*jhump_protoreflect_desc.Bar, error) {
	out := new(jhump_protoreflect_desc.Bar)
	err := grpc.Invoke(ctx, "/testprotos.TestService/DoSomething", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) DoSomethingElse(ctx context.Context, opts ...grpc.CallOption) (TestService_DoSomethingElseClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[0], c.cc, "/testprotos.TestService/DoSomethingElse", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceDoSomethingElseClient{stream}
	return x, nil
}

type TestService_DoSomethingElseClient interface {
	Send(*TestMessage) error
	CloseAndRecv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceDoSomethingElseClient struct {
	grpc.ClientStream
}

func (x *testServiceDoSomethingElseClient) Send(m *TestMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceDoSomethingElseClient) CloseAndRecv() (*TestResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) DoSomethingAgain(ctx context.Context, in *jhump_protoreflect_desc.Bar, opts ...grpc.CallOption) (TestService_DoSomethingAgainClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[1], c.cc, "/testprotos.TestService/DoSomethingAgain", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceDoSomethingAgainClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_DoSomethingAgainClient interface {
	Recv() (*AnotherTestMessage, error)
	grpc.ClientStream
}

type testServiceDoSomethingAgainClient struct {
	grpc.ClientStream
}

func (x *testServiceDoSomethingAgainClient) Recv() (*AnotherTestMessage, error) {
	m := new(AnotherTestMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) DoSomethingForever(ctx context.Context, opts ...grpc.CallOption) (TestService_DoSomethingForeverClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_TestService_serviceDesc.Streams[2], c.cc, "/testprotos.TestService/DoSomethingForever", opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceDoSomethingForeverClient{stream}
	return x, nil
}

type TestService_DoSomethingForeverClient interface {
	Send(*TestRequest) error
	Recv() (*TestResponse, error)
	grpc.ClientStream
}

type testServiceDoSomethingForeverClient struct {
	grpc.ClientStream
}

func (x *testServiceDoSomethingForeverClient) Send(m *TestRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceDoSomethingForeverClient) Recv() (*TestResponse, error) {
	m := new(TestResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for TestService service

type TestServiceServer interface {
	DoSomething(context.Context, *TestRequest) (*jhump_protoreflect_desc.Bar, error)
	DoSomethingElse(TestService_DoSomethingElseServer) error
	DoSomethingAgain(*jhump_protoreflect_desc.Bar, TestService_DoSomethingAgainServer) error
	DoSomethingForever(TestService_DoSomethingForeverServer) error
}

func RegisterTestServiceServer(s *grpc.Server, srv TestServiceServer) {
	s.RegisterService(&_TestService_serviceDesc, srv)
}

func _TestService_DoSomething_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).DoSomething(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testprotos.TestService/DoSomething",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).DoSomething(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_DoSomethingElse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).DoSomethingElse(&testServiceDoSomethingElseServer{stream})
}

type TestService_DoSomethingElseServer interface {
	SendAndClose(*TestResponse) error
	Recv() (*TestMessage, error)
	grpc.ServerStream
}

type testServiceDoSomethingElseServer struct {
	grpc.ServerStream
}

func (x *testServiceDoSomethingElseServer) SendAndClose(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceDoSomethingElseServer) Recv() (*TestMessage, error) {
	m := new(TestMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_DoSomethingAgain_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(jhump_protoreflect_desc.Bar)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).DoSomethingAgain(m, &testServiceDoSomethingAgainServer{stream})
}

type TestService_DoSomethingAgainServer interface {
	Send(*AnotherTestMessage) error
	grpc.ServerStream
}

type testServiceDoSomethingAgainServer struct {
	grpc.ServerStream
}

func (x *testServiceDoSomethingAgainServer) Send(m *AnotherTestMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_DoSomethingForever_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).DoSomethingForever(&testServiceDoSomethingForeverServer{stream})
}

type TestService_DoSomethingForeverServer interface {
	Send(*TestResponse) error
	Recv() (*TestRequest, error)
	grpc.ServerStream
}

type testServiceDoSomethingForeverServer struct {
	grpc.ServerStream
}

func (x *testServiceDoSomethingForeverServer) Send(m *TestResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceDoSomethingForeverServer) Recv() (*TestRequest, error) {
	m := new(TestRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _TestService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testprotos.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoSomething",
			Handler:    _TestService_DoSomething_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DoSomethingElse",
			Handler:       _TestService_DoSomethingElse_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DoSomethingAgain",
			Handler:       _TestService_DoSomethingAgain_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoSomethingForever",
			Handler:       _TestService_DoSomethingForever_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "desc_test_proto3.proto",
}

func init() { proto.RegisterFile("desc_test_proto3.proto", fileDescriptorDescTestProto3) }

var fileDescriptorDescTestProto3 = []byte{
	// 601 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x4e, 0xdb, 0x40,
	0x10, 0xc6, 0x36, 0x81, 0x76, 0x8c, 0xa8, 0xb5, 0xad, 0xc0, 0x8a, 0x2a, 0x14, 0xe5, 0xe4, 0xf6,
	0x60, 0x83, 0x91, 0xda, 0x28, 0x37, 0x68, 0xc3, 0x85, 0x12, 0x90, 0x81, 0xfe, 0x5d, 0x90, 0x13,
	0x26, 0x8e, 0x9b, 0xd8, 0xeb, 0xee, 0xae, 0x23, 0xc1, 0x0b, 0x70, 0x68, 0x1f, 0x08, 0xf5, 0x45,
	0xca, 0xb9, 0x4f, 0x52, 0x79, 0xd7, 0x21, 0x4e, 0xab, 0xc0, 0xc9, 0xb3, 0xb3, 0xdf, 0x7c, 0xfb,
	0xcd, 0x9f, 0x61, 0xe3, 0x12, 0x79, 0xff, 0x42, 0x20, 0x17, 0x17, 0x19, 0xa3, 0x82, 0xee, 0xba,
	0xf2, 0x43, 0xa0, 0x70, 0x49, 0x93, 0xd7, 0xad, 0x7b, 0xcc, 0x8e, 0xba, 0xad, 0x6f, 0x66, 0xa3,
	0xc8, 0xab, 0x44, 0x8e, 0xa2, 0xf2, 0xa2, 0x11, 0x51, 0x1a, 0x8d, 0xd1, 0x93, 0xa7, 0x5e, 0x3e,
	0x90, 0x20, 0x16, 0x67, 0x82, 0x32, 0x85, 0x68, 0xfe, 0xd2, 0xc1, 0x3c, 0x43, 0x2e, 0x02, 0xfc,
	0x9e, 0x23, 0x17, 0xc4, 0x01, 0x63, 0x40, 0xa9, 0xad, 0x35, 0x0c, 0x67, 0xdd, 0xdf, 0x70, 0x67,
	0xcf, 0xba, 0x27, 0x52, 0x4f, 0x27, 0xcd, 0x93, 0xa0, 0x80, 0x10, 0x0b, 0x8c, 0x5e, 0xc8, 0x6c,
	0xbd, 0xa1, 0x39, 0x4f, 0x83, 0xc2, 0x24, 0xaf, 0x0a, 0xcf, 0xb5, 0x6d, 0x34, 0x34, 0xc7, 0xf4,
	0x37, 0xab, 0xb1, 0xc5, 0x0b, 0x47, 0xc8, 0x79, 0x18, 0x61, 0x01, 0xbd, 0x26, 0x27, 0x50, 0xe3,
	0x69, 0x38, 0xc8, 0xed, 0x65, 0x09, 0x6e, 0x2f, 0x00, 0xbb, 0x5d, 0xe4, 0x02, 0x2f, 0xa7, 0xa7,
	0xbd, 0x94, 0x8a, 0x21, 0xb2, 0x39, 0x67, 0xa0, 0x88, 0x48, 0x0b, 0x6a, 0x83, 0x71, 0x18, 0x71,
	0xbb, 0xd6, 0x30, 0x1c, 0xd3, 0x6f, 0xfe, 0xcb, 0x58, 0x26, 0xe8, 0x1e, 0x14, 0xa0, 0x4e, 0x2a,
	0xd8, 0x55, 0xa0, 0x02, 0xea, 0x2d, 0x80, 0x99, 0xb3, 0x48, 0x6b, 0x84, 0x57, 0xb6, 0xa6, 0xd2,
	0x1a, 0xe1, 0x15, 0x79, 0x01, 0xb5, 0x49, 0x38, 0xce, 0x51, 0xa6, 0xfa, 0x24, 0x50, 0x87, 0xb6,
	0xde, 0xd2, 0x9a, 0x27, 0xb0, 0xa6, 0xa8, 0x79, 0x46, 0x53, 0x8e, 0x64, 0x1b, 0x8c, 0x50, 0x24,
	0x32, 0xd6, 0xf4, 0xb7, 0xaa, 0x0a, 0x4a, 0xe5, 0x73, 0x75, 0x08, 0x45, 0x42, 0xd6, 0x41, 0x9f,
	0x70, 0x5b, 0x6f, 0x18, 0x4e, 0x2d, 0xd0, 0x27, 0xbc, 0xd9, 0x82, 0xb5, 0x77, 0x39, 0x17, 0x34,
	0x39, 0xce, 0x44, 0x4c, 0x53, 0x42, 0x60, 0x39, 0x0d, 0x13, 0x2c, 0xe5, 0x48, 0x7b, 0x5e, 0x4f,
	0xad, 0xd4, 0xf3, 0x7a, 0x07, 0x60, 0xd6, 0x21, 0x62, 0xc2, 0xea, 0x79, 0xf7, 0xb0, 0x7b, 0xfc,
	0xa9, 0x6b, 0x2d, 0x11, 0x80, 0x95, 0x8f, 0x7b, 0x1f, 0xce, 0x3b, 0x3b, 0x96, 0x76, 0x6f, 0xfb,
	0x96, 0xee, 0xff, 0x2e, 0x7b, 0x7f, 0x8a, 0x6c, 0x12, 0xf7, 0x91, 0x7c, 0x01, 0xf3, 0x3d, 0x3d,
	0xa5, 0x09, 0x8a, 0x61, 0x9c, 0x46, 0x64, 0x73, 0x41, 0x09, 0xeb, 0x2f, 0xdd, 0x6f, 0xc3, 0x3c,
	0xc9, 0xd4, 0x04, 0x31, 0x1c, 0x8c, 0xb1, 0x2f, 0xdc, 0x62, 0xb2, 0xdc, 0xfd, 0x90, 0x35, 0x9f,
	0xdf, 0xdd, 0xda, 0xda, 0x9f, 0x5b, 0xdb, 0x84, 0x55, 0x39, 0xa3, 0xfe, 0xae, 0xf5, 0x96, 0x1c,
	0xc0, 0xb3, 0x0a, 0x75, 0x67, 0xcc, 0x91, 0x2c, 0x1a, 0x90, 0xba, 0xfd, 0xff, 0xbb, 0xaa, 0xbe,
	0x8e, 0x46, 0x3e, 0x83, 0x55, 0xe1, 0xd9, 0x8b, 0xc2, 0x38, 0x25, 0x0f, 0xca, 0xa9, 0x3f, 0xd2,
	0x86, 0xe6, 0xf2, 0xdd, 0xad, 0xbd, 0xb4, 0xad, 0x91, 0x43, 0x20, 0x15, 0xe6, 0x03, 0xca, 0x70,
	0x82, 0x6c, 0x71, 0x0d, 0x1e, 0x10, 0xb9, 0xad, 0xb5, 0x5b, 0xb0, 0xd2, 0x97, 0x6d, 0x24, 0x5b,
	0xae, 0x5a, 0x41, 0x77, 0xba, 0x82, 0xee, 0x11, 0x8a, 0x21, 0xbd, 0x54, 0xfd, 0xe5, 0xf6, 0x8f,
	0x1b, 0x43, 0x4e, 0x55, 0x89, 0x6f, 0x9f, 0xc1, 0xaa, 0xb2, 0xfc, 0x47, 0x43, 0x7f, 0xde, 0xa8,
	0x4d, 0x9b, 0x93, 0x52, 0x9d, 0x9e, 0x60, 0x4a, 0xb5, 0xdf, 0xfa, 0xfa, 0x26, 0x8a, 0xc5, 0x30,
	0xef, 0xb9, 0x7d, 0x9a, 0x78, 0xb2, 0x5c, 0x5e, 0xb5, 0x5c, 0x5e, 0x9c, 0x0a, 0x64, 0x69, 0x38,
	0xf6, 0x22, 0x1a, 0x51, 0x6f, 0xc6, 0xd7, 0x5b, 0x51, 0xbf, 0xa1, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x52, 0x40, 0xdd, 0xbe, 0x99, 0x04, 0x00, 0x00,
}
